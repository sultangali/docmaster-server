import dotenv from 'dotenv';
import connectDB from '../config/database.js';
import User from '../models/User.js';
import { ObjectId } from 'mongodb';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const forceSyncLinks = async () => {
  try {
    console.log('üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–≤—è–∑–µ–π...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await connectDB();
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    const leaderId = '68c88186c3d5b361016f3b32';
    const studentId = '68c8815dc3d5b361016f3b1e';
    
    console.log('\nüéØ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å–≤—è–∑—å...');
    console.log(`–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å ID: ${leaderId}`);
    console.log(`–°—Ç—É–¥–µ–Ω—Ç ID: ${studentId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
    const leader = await User.findById(leaderId);
    const student = await User.findById(studentId);
    
    if (!leader) {
      console.log('‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    if (!student) {
      console.log('‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`\nüìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:`);
    console.log(`–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${leader.fullName}`);
    console.log(`–°—Ç—É–¥–µ–Ω—Ç: ${student.fullName}`);
    console.log(`–°—Ç—É–¥–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ supervisees: ${leader.supervisees?.includes(studentId)}`);
    console.log(`Supervisor —É —Å—Ç—É–¥–µ–Ω—Ç–∞: ${student.supervisor || 'null'}`);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
    console.log('\nüî® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å...');
    
    // –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateResult = await User.updateOne(
      { _id: new ObjectId(studentId) },
      { $set: { supervisor: new ObjectId(leaderId) } }
    );
    
    console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${updateResult.modifiedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const updatedStudent = await User.findById(studentId);
    console.log(`\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`);
    console.log(`Supervisor —É —Å—Ç—É–¥–µ–Ω—Ç–∞: ${updatedStudent.supervisor}`);
    console.log(`–°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${updatedStudent.supervisor?.toString() === leaderId}`);
    
    // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    console.log('\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π...');
    
    const allLeaders = await User.find({ 
      role: 'leaders', 
      supervisees: { $exists: true, $ne: [] }
    });
    
    let totalFixed = 0;
    
    for (const currentLeader of allLeaders) {
      console.log(`\nüë®‚Äçüè´ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${currentLeader.fullName}`);
      
      if (!currentLeader.supervisees || currentLeader.supervisees.length === 0) {
        console.log('  –ù–µ—Ç –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö');
        continue;
      }
      
      for (const superviseId of currentLeader.supervisees) {
        console.log(`  üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ ${superviseId}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const currentStudent = await User.findById(superviseId);
        if (!currentStudent) {
          console.log(`    ‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å
        const hasCorrectSupervisor = currentStudent.supervisor && 
          currentStudent.supervisor.toString() === currentLeader._id.toString();
        
        if (!hasCorrectSupervisor) {
          console.log(`    üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –¥–ª—è ${currentStudent.fullName}`);
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å
          await User.updateOne(
            { _id: superviseId },
            { $set: { supervisor: currentLeader._id } }
          );
          
          totalFixed++;
          console.log(`    ‚úÖ –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        } else {
          console.log(`    ‚úÖ –°–≤—è–∑—å —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
        }
      }
    }
    
    console.log(`\nüìä –ò—Ç–æ–≥–∏:`);
    console.log(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: ${totalFixed}`);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–≤—è–∑–∏
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π —Å–≤—è–∑–∏...');
    const finalStudent = await User.findById(studentId);
    const finalLeader = await User.findById(leaderId);
    
    console.log(`–°—Ç—É–¥–µ–Ω—Ç: ${finalStudent.fullName}`);
    console.log(`Supervisor: ${finalStudent.supervisor}`);
    console.log(`–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${finalLeader.fullName}`);
    console.log(`–°—Ç—É–¥–µ–Ω—Ç –≤ supervisees: ${finalLeader.supervisees?.map(id => id.toString()).includes(studentId)}`);
    console.log(`–°–≤—è–∑—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: ${finalStudent.supervisor?.toString() === leaderId}`);
    
    if (finalStudent.supervisor?.toString() === leaderId) {
      console.log('\nüéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!');
    } else {
      console.log('\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï —Ä–µ—à–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.');
    }
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
};

forceSyncLinks();
