
import dotenv from 'dotenv';
import connectDB from '../config/database.js';
import User from '../models/User.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const fixAdminAndLinks = async () => {
  try {
    console.log('üîß –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∞–¥–º–∏–Ω–æ–º –∏ —Å–≤—è–∑—è–º–∏...');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await connectDB();
    
    // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å email —É –∞–¥–º–∏–Ω–∞
    console.log('\nüìß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º email —É –∞–¥–º–∏–Ω–∞...');
    
    const admin = await User.findOne({ role: 'admins' });
    if (admin) {
      if (!admin.email) {
        admin.email = 'admin@docmaster.kz';
        await admin.save();
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω email –¥–ª—è –∞–¥–º–∏–Ω–∞: ${admin.email}`);
      } else {
        console.log(`‚úÖ Email —É –∞–¥–º–∏–Ω–∞ —É–∂–µ –µ—Å—Ç—å: ${admin.email}`);
      }
    } else {
      console.log('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    // 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å-–ø–æ–¥–æ–ø–µ—á–Ω—ã–π
    console.log('\nüë• –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å-–ø–æ–¥–æ–ø–µ—á–Ω—ã–π...');
    
    let fixedCount = 0;
    let checkedCount = 0;
    
    // –ù–∞–π—Ç–∏ –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏
    const leaders = await User.find({ 
      role: 'leaders', 
      supervisees: { $exists: true, $ne: [] }
    }).populate('supervisees');
    
    console.log(`üë®‚Äçüè´ –ù–∞–π–¥–µ–Ω–æ ${leaders.length} —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–¥–æ–ø–µ—á–Ω—ã–º–∏`);
    
    for (const leader of leaders) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: ${leader.fullName} (${leader.supervisees.length} –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö)`);
      
      for (const superviseeId of leader.supervisees) {
        checkedCount++;
        
        // –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        const student = await User.findById(superviseeId);
        
        if (!student) {
          console.log(`‚ùå –°—Ç—É–¥–µ–Ω—Ç —Å ID ${superviseeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —Å–≤—è–∑—å supervisor
        if (!student.supervisor || student.supervisor.toString() !== leader._id.toString()) {
          console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–≤—è–∑—å: ${student.fullName} -> ${leader.fullName}`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ supervisor –Ω–∞–ø—Ä—è–º—É—é
          await User.findByIdAndUpdate(
            student._id,
            { supervisor: leader._id },
            { new: true, runValidators: false } // –æ—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
          );
          
          fixedCount++;
          console.log(`‚úÖ –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`);
        } else {
          console.log(`‚úÖ –°–≤—è–∑—å —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –¥–ª—è ${student.fullName}`);
        }
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏...');
    
    const studentsWithSupervisor = await User.find({
      role: { $in: ['magistrants', 'doctorants'] },
      supervisor: { $exists: true, $ne: null }
    }).populate('supervisor');
    
    for (const student of studentsWithSupervisor) {
      const supervisor = await User.findById(student.supervisor);
      
      if (!supervisor) continue;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ supervisees —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
      if (!supervisor.supervisees || !supervisor.supervisees.some(id => id.toString() === student._id.toString())) {
        console.log(`üîß –î–æ–±–∞–≤–ª—è–µ–º ${student.fullName} –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö ${supervisor.fullName}`);
        
        await User.findByIdAndUpdate(
          supervisor._id,
          { $addToSet: { supervisees: student._id } },
          { new: true, runValidators: false }
        );
        
        fixedCount++;
      }
    }
    
    // 4. –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ degree —É –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤ –∏ –¥–æ–∫—Ç–æ—Ä–∞–Ω—Ç–æ–≤ (–æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –µ–≥–æ –∏–º–µ—Ç—å)
    console.log('\nüßπ –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ–ª—è degree —É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...');
    
    const studentsWithDegree = await User.updateMany(
      { 
        role: { $in: ['magistrants', 'doctorants'] },
        degree: { $exists: true }
      },
      { $unset: { degree: "" } }
    );
    
    if (studentsWithDegree.modifiedCount > 0) {
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ –ø–æ–ª–µ degree —É ${studentsWithDegree.modifiedCount} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤`);
    }
    
    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
    console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–≤—è–∑–µ–π: ${checkedCount}`);
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: ${fixedCount}`);
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...');
    
    const inconsistentData = await User.aggregate([
      {
        $match: { 
          $or: [
            { role: 'leaders', supervisees: { $exists: true, $ne: [] } },
            { role: { $in: ['magistrants', 'doctorants'] }, supervisor: { $exists: true, $ne: null } }
          ]
        }
      },
      {
        $lookup: {
          from: 'users',
          localField: 'supervisees',
          foreignField: '_id',
          as: 'superviseeDocs'
        }
      },
      {
        $lookup: {
          from: 'users',
          localField: 'supervisor',
          foreignField: '_id',
          as: 'supervisorDoc'
        }
      }
    ]);
    
    console.log('‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞ - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å-–ø–æ–¥–æ–ø–µ—á–Ω—ã–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
    process.exit(1);
  }
};

fixAdminAndLinks();
