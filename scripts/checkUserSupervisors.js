import mongoose from 'mongoose';
import dotenv from 'dotenv';
import User from '../models/User.js';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const checkUserSupervisors = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤
    const magistrants = await User.find({ 
      role: 'magistrants', 
      isActive: true 
    }).select('lastname firstname fathername supervisor OP language');

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤: ${magistrants.length}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–∞
    for (const magistrant of magistrants) {
      const supervisorInfo = magistrant.supervisor 
        ? await User.findById(magistrant.supervisor).select('lastname firstname fathername')
        : null;

      console.log(`üë®‚Äçüéì ${magistrant.lastname} ${magistrant.firstname}`);
      console.log(`   OP: ${magistrant.OP}`);
      console.log(`   –Ø–∑—ã–∫: ${magistrant.language}`);
      
      if (supervisorInfo) {
        console.log(`   ‚úÖ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${supervisorInfo.lastname} ${supervisorInfo.firstname}`);
      } else {
        console.log(`   ‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ù–ï –ù–ê–ó–ù–ê–ß–ï–ù!`);
      }
      console.log('');
    }

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    const leaders = await User.find({ 
      role: 'leaders', 
      isActive: true 
    }).select('lastname firstname fathername supervisees')
      .populate('supervisees', 'lastname firstname fathername');

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: ${leaders.length}\n`);

    for (const leader of leaders) {
      console.log(`üë®‚Äçüè´ ${leader.lastname} ${leader.firstname}`);
      console.log(`   –ü–æ–¥–æ–ø–µ—á–Ω—ã—Ö: ${leader.supervisees?.length || 0}`);
      
      if (leader.supervisees && leader.supervisees.length > 0) {
        leader.supervisees.forEach(supervisee => {
          console.log(`     - ${supervisee.lastname} ${supervisee.firstname}`);
        });
      }
      console.log('');
    }

    // –ù–∞–π–¥–µ–º –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤ –±–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    const magistrantsWithoutSupervisors = await User.find({
      role: 'magistrants',
      isActive: true,
      $or: [
        { supervisor: { $exists: false } },
        { supervisor: null }
      ]
    }).select('lastname firstname fathername OP language');

    if (magistrantsWithoutSupervisors.length > 0) {
      console.log(`\nüö® –ú–ê–ì–ò–°–¢–†–ê–ù–¢–´ –ë–ï–ó –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô (${magistrantsWithoutSupervisors.length}):\n`);
      magistrantsWithoutSupervisors.forEach(student => {
        console.log(`‚ùå ${student.lastname} ${student.firstname} (${student.OP})`);
      });
      console.log('\nüí° –≠—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ —Å–º–æ–≥—É—Ç —Å–æ–∑–¥–∞—Ç—å –ò–£–ü!');
    } else {
      console.log('\n‚úÖ –í—Å–µ –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç—ã –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç—É
const assignSupervisor = async (studentEmail, supervisorEmail) => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    
    const student = await User.findOne({ email: studentEmail, role: 'magistrants' });
    const supervisor = await User.findOne({ email: supervisorEmail, role: 'leaders' });

    if (!student) {
      console.log(`‚ùå –ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç —Å email ${studentEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    if (!supervisor) {
      console.log(`‚ùå –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å email ${supervisorEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è —Å—Ç—É–¥–µ–Ω—Ç—É
    student.supervisor = supervisor._id;
    await student.save();

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ–ø–µ—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    if (!supervisor.supervisees.includes(student._id)) {
      supervisor.supervisees.push(student._id);
      await supervisor.save();
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:`);
    console.log(`   –°—Ç—É–¥–µ–Ω—Ç: ${student.fullName}`);
    console.log(`   –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${supervisor.fullName}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è:', error);
  } finally {
    await mongoose.disconnect();
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 0) {
  // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
  checkUserSupervisors();
} else if (args.length === 2) {
  // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è: node checkUserSupervisors.js student@email.com supervisor@email.com
  const [studentEmail, supervisorEmail] = args;
  assignSupervisor(studentEmail, supervisorEmail);
} else {
  console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node checkUserSupervisors.js                           - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
  node checkUserSupervisors.js student@email supervisor@email - –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
  `);
}

export default { checkUserSupervisors, assignSupervisor };
