import mongoose from 'mongoose';
import dotenv from 'dotenv';
import User from '../models/User.js';
import IUP from '../models/IUP.js';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const createMissingIUPs = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    const currentYear = new Date().getFullYear();
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤ —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    const magistrants = await User.find({ 
      role: 'magistrants', 
      isActive: true,
      supervisor: { $exists: true, $ne: null }
    }).populate('supervisor', 'lastname firstname fathername fullName');

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏: ${magistrants.length}\n`);

    let iupsCreated = 0;
    let iupsExisted = 0;
    let errors = 0;

    for (const magistrant of magistrants) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ò–£–ü –Ω–∞ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        const existingIUP = await IUP.findOne({
          student: magistrant._id,
          year: currentYear,
          isActive: true
        });

        if (existingIUP) {
          console.log(`‚úÖ ${magistrant.fullName} - –ò–£–ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          iupsExisted++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º –ò–£–ü
        const newIUP = await IUP.createWithDefaultStages(
          magistrant._id,
          magistrant.supervisor._id,
          magistrant.OP,
          magistrant.language
        );

        console.log(`üéØ ${magistrant.fullName} - –ò–£–ü —Å–æ–∑–¥–∞–Ω (ID: ${newIUP._id})`);
        console.log(`   –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${magistrant.supervisor.fullName}`);
        console.log(`   –û–ü: ${magistrant.OP}, –Ø–∑—ã–∫: ${magistrant.language}`);
        iupsCreated++;

      } catch (error) {
        console.error(`‚ùå ${magistrant.fullName} - –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ò–£–ü:`, error.message);
        errors++;
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤ –±–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π
    const magistrantsWithoutSupervisors = await User.find({
      role: 'magistrants',
      isActive: true,
      $or: [
        { supervisor: { $exists: false } },
        { supervisor: null }
      ]
    });

    console.log(`\nüìà –ò–¢–û–ì–ò:`);
    console.log(`‚úÖ –ò–£–ü —Å–æ–∑–¥–∞–Ω–æ: ${iupsCreated}`);
    console.log(`‚ÑπÔ∏è –ò–£–ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: ${iupsExisted}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`‚ö†Ô∏è –ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤ –±–µ–∑ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π: ${magistrantsWithoutSupervisors.length}`);

    if (magistrantsWithoutSupervisors.length > 0) {
      console.log(`\nüö® –ú–ê–ì–ò–°–¢–†–ê–ù–¢–´ –ë–ï–ó –†–£–ö–û–í–û–î–ò–¢–ï–õ–ï–ô:`);
      magistrantsWithoutSupervisors.forEach(student => {
        console.log(`   - ${student.fullName} (${student.email})`);
      });
      console.log(`\nüí° –î–ª—è —ç—Ç–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π`);
      console.log(`   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node scripts/checkUserSupervisors.js student@email supervisor@email`);
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ò–£–ü
    const totalIUPs = await IUP.countDocuments({ year: currentYear, isActive: true });
    console.log(`\nüìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ò–£–ü –Ω–∞ ${currentYear} –≥–æ–¥: ${totalIUPs}`);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const statusStats = await IUP.aggregate([
      { $match: { year: currentYear, isActive: true } },
      { $group: { _id: '$overallStatus', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]);

    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:`);
    statusStats.forEach(stat => {
      console.log(`   ${stat._id}: ${stat.count}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ò–£–ü –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É
const createIUPForStudent = async (studentEmail) => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    
    const student = await User.findOne({ 
      email: studentEmail, 
      role: 'magistrants' 
    }).populate('supervisor');

    if (!student) {
      console.log(`‚ùå –ú–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç —Å email ${studentEmail} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    if (!student.supervisor) {
      console.log(`‚ùå –£ –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–∞ ${student.fullName} –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å`);
      return;
    }

    const currentYear = new Date().getFullYear();
    const existingIUP = await IUP.findOne({
      student: student._id,
      year: currentYear,
      isActive: true
    });

    if (existingIUP) {
      console.log(`‚ö†Ô∏è –£ –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–∞ ${student.fullName} —É–∂–µ –µ—Å—Ç—å –ò–£–ü –Ω–∞ ${currentYear} –≥–æ–¥`);
      return;
    }

    const newIUP = await IUP.createWithDefaultStages(
      student._id,
      student.supervisor._id,
      student.OP,
      student.language
    );

    console.log(`‚úÖ –ò–£–ü —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è ${student.fullName}`);
    console.log(`   ID –ò–£–ü: ${newIUP._id}`);
    console.log(`   –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${student.supervisor.fullName}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ò–£–ü:', error);
  } finally {
    await mongoose.disconnect();
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length === 0) {
  // –°–æ–∑–¥–∞–µ–º –ò–£–ü –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤
  createMissingIUPs();
} else if (args.length === 1) {
  // –°–æ–∑–¥–∞–µ–º –ò–£–ü –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  const [studentEmail] = args;
  createIUPForStudent(studentEmail);
} else {
  console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node createMissingIUPs.js                    - —Å–æ–∑–¥–∞—Ç—å –ò–£–ü –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∏—Å—Ç—Ä–∞–Ω—Ç–æ–≤
  node createMissingIUPs.js student@email.com - —Å–æ–∑–¥–∞—Ç—å –ò–£–ü –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
  `);
}

export default { createMissingIUPs, createIUPForStudent };
