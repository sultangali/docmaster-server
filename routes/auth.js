import express from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/User.js';
import { authenticate } from '../middleware/auth.js';

const router = express.Router();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '24h'
  });
};

// @route   POST /api/auth/login
// @desc    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @access  Public
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!username || !password) {
      return res.status(400).json({
        success: false,
        message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å'
      });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    const user = await User.findOne({ 
      username: username.toLowerCase(),
      isActive: true 
    });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    let isPasswordValid = false;
    
    console.log('üîê Debug –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
    console.log('   User role:', user.role);
    console.log('   User has password:', !!user.password);
    console.log('   Provided password:', password);
    
    if (user.role === 'admins') {
      // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
      console.log('   –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞...');
      
      if (!user.password) {
        console.log('   ‚ùå –£ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç –ø–∞—Ä–æ–ª—è –≤ –ë–î, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º admin123');
        user.password = 'admin123';
        await user.save();
        console.log('   ‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      }
      
      isPasswordValid = await user.comparePassword(password);
      console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', isPasswordValid);
    } else {
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å
      console.log('   –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å...');
      isPasswordValid = password === process.env.SHARED_PASSWORD;
      console.log('   –û–±—â–∏–π –ø–∞—Ä–æ–ª—å –≤ env:', process.env.SHARED_PASSWORD);
      console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', isPasswordValid);
    }

    if (!isPasswordValid) {
      console.log('   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞');
      return res.status(401).json({
        success: false,
        message: user.role === 'admins' ? '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞' : '–ù–µ–≤–µ—Ä–Ω—ã–π –æ–±—â–∏–π –ø–∞—Ä–æ–ª—å'
      });
    }
    
    console.log('   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.lastLogin = new Date();
    await user.save();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    const token = generateToken(user._id);

    // –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å populate –ø–æ—Å–ª–µ login
    const fullUserData = await User.findById(user._id)
      .populate('supervisor', 'lastname firstname fathername fullName degree language whatsapp email')
      .populate('supervisees', 'lastname firstname fathername fullName role OP language whatsapp email')
      .select('-password -__v');

    console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', {
      role: fullUserData.role,
      hasSupervisor: !!fullUserData.supervisor,
      superviseesCount: fullUserData.supervisees?.length || 0
    });

    res.status(200).json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      data: {
        user: fullUserData,
        token
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    });
  }
});

// @route   GET /api/auth/users
// @desc    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ
// @access  Public
router.get('/users', async (req, res) => {
  try {
    const users = await User.find({ isActive: true })
      .select('username lastname firstname fathername role fullName')
      .sort({ role: 1, lastname: 1, firstname: 1 });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const groupedUsers = users.reduce((acc, user) => {
      const roleKey = user.role;
      if (!acc[roleKey]) {
        acc[roleKey] = [];
      }
      acc[roleKey].push({
        value: user.username,
        label: user.fullName,
        role: user.role,
        id: user._id
      });
      return acc;
    }, {});

    // –¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–æ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è Select –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const flatUsers = users.map(user => ({
      value: user.username,
      label: user.fullName,
      role: user.role,
      id: user._id
    }));

    res.status(200).json({
      success: true,
      data: {
        users: flatUsers,
        groupedUsers,
        total: users.length
      }
    });

  } catch (error) {
    console.error('Get users error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    });
  }
});

// @route   GET /api/auth/me
// @desc    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
// @access  Private
router.get('/me', authenticate, async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å populate
    const user = await User.findById(req.user._id)
      .populate('supervisor', 'lastname firstname fathername fullName degree language whatsapp email')
      .populate('supervisees', 'lastname firstname fathername fullName role OP language whatsapp email')
      .select('-password -__v');

    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    res.status(200).json({
      success: true,
      data: { user }
    });

  } catch (error) {
    console.error('Get current user error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    });
  }
});

// @route   POST /api/auth/refresh
// @desc    –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
// @access  Private
router.post('/refresh', authenticate, async (req, res) => {
  try {
    const newToken = generateToken(req.user._id);
    
    res.status(200).json({
      success: true,
      data: { token: newToken }
    });

  } catch (error) {
    console.error('Token refresh error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞'
    });
  }
});

// @route   POST /api/auth/create-admin
// @desc    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
// @access  Public (—Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ)
router.post('/create-admin', async (req, res) => {
  try {
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        success: false,
        message: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ'
      });
    }

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
    await User.deleteMany({ role: 'admins' });
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω—ã');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    const newAdmin = new User({
      lastname: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      firstname: '–°–∏—Å—Ç–µ–º–Ω—ã–π',
      fathername: '',
      role: 'admins',
      whatsapp: '+77000000000',
      language: '–†—É—Å—Å–∫–∏–π',
      username: 'admin',
      password: 'admin123',
      isActive: true
    });

    await newAdmin.save();
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∞–¥–º–∏–Ω');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    const testResult = await newAdmin.comparePassword('admin123');
    console.log('üß™ –¢–µ—Å—Ç –ø–∞—Ä–æ–ª—è:', testResult);

    res.status(200).json({
      success: true,
      message: '–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      data: {
        username: 'admin',
        password: 'admin123',
        passwordTest: testResult
      }
    });

  } catch (error) {
    console.error('Create admin error:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞',
      error: error.message
    });
  }
});

export default router;
